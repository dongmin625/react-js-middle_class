//클로저

//Lexical 환경 

//여기 위치에서 함수는 사용가능 let은 불가

let one; //one : undefined 사용은가능
one =1; //one : 1

function addOne(num){
  console.log(one+num);
}

addOne(5);//새로운 Lexical 환경 num은 찾았지만 one 을 못찾았기에 외부영역으로 이동

function makeAdder(x){
  return function(y){//익명함수 내부에서 외부접근
    return x+y;
  }
}

const add3 = makeAdder(3);
console.log(add3(2));

//makeAdder는 하나의 매개변수 x를 받는 함수입니다.

//이 함수는 익명 함수를 반환합니다. 이 익명 함수는 매개변수 y를 받고, x + y를 계산하여 반환합니다.

//이때, 반환된 익명 함수는 makeAdder 함수가 호출될 때의 x 값을 기억합니다. 이것이 클로저의 핵심입니다.

const add3 = makeAdder(3);

//여기서 makeAdder(3)을 호출하면, x 값으로 3이 전달됩니다.

//이 호출은 새로운 함수 (y) => 3 + y를 반환하고, 이 함수는 add3 변수에 저장됩니다. 즉, add3는 이제 y를 받아 3 + y를 계산하는 함수가 됩니다.
