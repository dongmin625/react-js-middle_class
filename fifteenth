//생성자 방식
const User = fuction(name, age){
  this.name = name;
  this.age = age;
  //this.showName = function(){
  //  console.log(this.name);
  //};
};

User.prototype.showName = function() {
  console.log(this.name);
};

const mike =  new User("Mike",30); //생성자에서는 new 키워드를 빼도 에러x -> undifind


//클래스 방식
class User2{
  constructor(name,age){ //객체를 만들어주는 생성자 메서드(프로토타입)
    this.name=name;
    this.age=age;
  }
  showName(){
    console.log(this.name);
  }
}

const tom = new User2("Name",19); //클래스에서는 new 없이 동작 불가

//상속 생성자의 경우 protopype로 상속 구현 클래스에서는 extends


class Car{
  constructor(color){//생성자
    this.color = color;
    this.wheels = 4;
  }
  drive(){
    console.log("drive..');
  }
  stop{
    console.log("stop..");
  }
}

class Bmw extends Car{
  constructor(color){
    super(color); //꼭 써야함 부모생성자 가지고오기
    this.navigation =1;
  }

  park(){
    console.log("PARK");
  }
  stop(){
    super.stop();//부모의 stop메서드
    console.log("OFF");//오버라이딩
  }
}

const x4 = new Bmw("blue");





























